#include <iostream>
#include <vector>
#include <algorithm>
#include <omp.h>
#include <ctime>

using namespace std;

// Параллельная сортировка Шелла
void parallel_shell_sort(vector<int>& arr) {
    int n = arr.size();
    
    // Начинаем с большого промежутка, затем уменьшаем его
    for (int gap = n/2; gap > 0; gap /= 2) {
        // Используем OpenMP для параллелизации внутреннего цикла
        #pragma omp parallel for shared(arr, gap)
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            
            // Сдвигаем элементы, пока не найдем правильное место для arr[i]
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }
            arr[j] = temp;
        }
    }
}

int main() {
    const int size = 1000000; // Размер массива
    vector<int> arr(size);
    
    // Инициализация массива случайными числами
    srand(time(0));
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000000;
    }
    
    cout << "Сортировка массива из " << size << " элементов..." << endl;
    
    double start_time = omp_get_wtime();
    parallel_shell_sort(arr);
    double end_time = omp_get_wtime();
    
    cout << "Время выполнения: " << end_time - start_time << " секунд" << endl;
    
    // Проверка отсортированности (опционально)
    bool is_sorted = is_sorted(arr.begin(), arr.end());
    cout << "Массив " << (is_sorted ? "отсортирован" : "не отсортирован") << endl;
    
    return 0;
}
