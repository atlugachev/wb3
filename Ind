#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <string.h>

// Функция для сравнения вещественных чисел (для qsort)
int compare_doubles(const void *a, const void *b) {
    double arg1 = *(const double*)a;
    double arg2 = *(const double*)b;
    return (arg1 > arg2) - (arg1 < arg2);
}

int main(int argc, char **argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Проверка количества аргументов
    if (argc < 2) {
        if (rank == 0) {
            printf("Usage: mpirun -n <processes> %s <input_file1> <input_file2> ... <input_filen>\n", argv[0]);
        }
        MPI_Finalize();
        return 1;
    }

    // Проверка соответствия количества процессов количеству файлов
    if (size != argc - 1) {
        if (rank == 0) {
            printf("Error: Number of processes (%d) must match number of input files (%d)\n", size, argc - 1);
        }
        MPI_Finalize();
        return 1;
    }

    // Каждый процесс работает со своим файлом
    char *input_filename = argv[rank + 1];
    
    // Открываем файл для чтения
    FILE *input_file = fopen(input_filename, "r");
    if (input_file == NULL) {
        printf("Process %d: Error opening input file %s\n", rank, input_filename);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    // Читаем числа из файла
    double *numbers = NULL;
    int count = 0;
    double value;
    
    while (fscanf(input_file, "%lf", &value) == 1) {
        numbers = realloc(numbers, (count + 1) * sizeof(double));
        numbers[count] = value;
        count++;
    }
    fclose(input_file);

    // Сортируем числа
    qsort(numbers, count, sizeof(double), compare_doubles);

    // Создаем имя выходного файла (добавляем "_sorted" к имени входного)
    char output_filename[256];
    strcpy(output_filename, input_filename);
    strcat(output_filename, "_sorted");
    
    // Записываем отсортированные числа в выходной файл
    FILE *output_file = fopen(output_filename, "w");
    if (output_file == NULL) {
        printf("Process %d: Error opening output file %s\n", rank, output_filename);
        free(numbers);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    for (int i = 0; i < count; i++) {
        fprintf(output_file, "%lf\n", numbers[i]);
    }
    fclose(output_file);

    // Освобождаем память
    free(numbers);

    MPI_Finalize();
    return 0;
}
